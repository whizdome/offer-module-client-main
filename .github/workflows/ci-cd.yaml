name: CI/CD Pipeline with Terraform and EKS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform-setup:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.0

      - name: Terraform Backend Config
        run: |
          cat << EOF > terraform/backend.tf
          terraform {
            backend "s3" {
              bucket = "tripplescale-tf-backend"
              key    = "terraform.tfstate"
              region = "${{ secrets.AWS_REGION }}"
            }
          }
          EOF

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Apply
        run: terraform -chdir=terraform apply -auto-approve

  create-and-deploy:
    runs-on: ubuntu-latest
    needs: terraform-setup
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
      HOSTED_ZONE_ID: ${{ secrets.HOSTED_ZONE_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create ECR repository
        id: create-ecr
        run: |
          REPO_NAME=my-app
          aws ecr create-repository --repository-name $REPO_NAME --region $AWS_REGION || echo "Repository already exists."
          echo "ECR_REPO_URL=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${REPO_NAME}" >> $GITHUB_ENV

      - name: Log in to Amazon ECR
        id: ecr-login
        run: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - name: Install dependencies
        run: npm install

      - name: Build Next.js app
        run: npm run build

      - name: Build and tag Docker image
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          docker build -t ${{ env.ECR_REPO_URL }}:${IMAGE_TAG} .
          docker tag ${{ env.ECR_REPO_URL }}:${IMAGE_TAG} ${{ env.ECR_REPO_URL }}:latest
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.ECR_REPO_URL }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REPO_URL }}:latest

      - name: Set up kubectl
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

          - name: Deploy to Kubernetes
          run: |
            sed -i 's|IMAGE_URL|${{ env.ECR_REPO_URL }}:${{ env.IMAGE_TAG }}|g' k8s/deployment.yaml
            kubectl apply -f k8s/deployment.yaml --request-timeout=60s --validate=false
            kubectl apply -f k8s/service.yaml --request-timeout=60s --validate=false
            kubectl apply -f k8s/ingress.yaml --request-timeout=60s --validate=false || exit 0  # Ignore ingress errors
            
            
          - name: Update Route 53 for admin.tripplescale.co
          run: |
            ALB_DNS=$(kubectl get ingress my-app-ingress -o jsonpath="{.status.loadBalancer.ingress[0].hostname}" || echo "None")
            if [ "$ALB_DNS" != "None" ]; then
              aws route53 change-resource-record-sets --hosted-zone-id ${{ env.HOSTED_ZONE_ID }} --change-batch '{
                "Changes": [{
                  "Action": "UPSERT",
                  "ResourceRecordSet": {
                    "Name": "admin.tripplescale.co",
                    "Type": "A",
                    "AliasTarget": {
                      "HostedZoneId": "Z35SXDOTRQ7X7K",
                      "DNSName": "'$ALB_DNS'",
                      "EvaluateTargetHealth": false
                    }
                  }
                }]
              }'
